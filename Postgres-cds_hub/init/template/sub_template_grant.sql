--GRANT INSERT, SELECT ON TABLE <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%> TO cds2db_user; -- after development phase
GRANT INSERT, DELETE, UPDATE, SELECT ON TABLE <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%> TO cds2db_user; -- Additional authorizations for testing
GRANT INSERT, DELETE, UPDATE, SELECT ON TABLE <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%> TO db_user; -- development phase
GRANT TRIGGER ON <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%> TO cds2db_user;
ALTER TABLE <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%> ALTER COLUMN <%GRANT_TABLE_NAME%>_id SET DEFAULT (nextval('<%GRANT_SCHEMA_NAME%>.<%GRANT_SCHEMA_NAME%>_seq'));
GRANT USAGE ON SCHEMA <%GRANT_SCHEMA_NAME%> TO cds2db_user;
GRANT USAGE ON <%GRANT_SCHEMA_NAME%>.<%GRANT_SCHEMA_NAME%>_seq TO cds2db_user;

CREATE OR REPLACE FUNCTION <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%>_tr_ins_fkt()
RETURNS TRIGGER AS $$
BEGIN
    -- Enter the current time
    NEW.input_datetime := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER <%GRANT_TABLE_NAME%>_tr_ins_tr
  BEFORE INSERT
  ON <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%>
  FOR EACH ROW
  EXECUTE PROCEDURE <%GRANT_SCHEMA_NAME%>.<%GRANT_TABLE_NAME%>_tr_ins_fkt();
