-- ########################################################################################################
--
-- This file is generated. Changes should only be made by regenerating the file.
--
-- Rights definition file             : ./Postgres-cds_hub/init/template/User_Schema_Rights_Definition.xlsx
-- Rights definition file last update : 2025-04-04 03:35:29
-- Rights definition file size        : 15808 Byte
--
-- Create SQL Tables in Schema "db2frontend_in"
-- Create time: 2025-04-04 08:42:44
-- TABLE_DESCRIPTION:  ./R-db2frontend/db2frontend/inst/extdata/Frontend_Table_Description.xlsx[frontend_table_description]
-- SCRIPTNAME:  450_cre_table_frontend_in_trig.sql
-- TEMPLATE:  template_cre_trigger_set_id.sql
-- OWNER_USER:  db2frontend_user
-- OWNER_SCHEMA:  db2frontend_in
-- TAGS:  
-- TABLE_PREFIX:  
-- TABLE_POSTFIX:  _fe
-- RIGHTS:  
-- GRANT_TARGET_USER:  
-- COPY_FUNC_SCRIPTNAME:  
-- COPY_FUNC_TEMPLATE:  
-- COPY_FUNC_NAME:  
-- SCHEMA_2:  
-- TABLE_POSTFIX_2:  
-- SCHEMA_3:  
-- TABLE_POSTFIX_3:  
-- ########################################################################################################

-- Generation of triggers for the frontend tables to set the record ID for records generated by the frontend


-- db2frontend_in.patient_fe
------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION db2frontend_in.patient_fe_ins_fkt()
RETURNS TRIGGER
SECURITY DEFINER
AS $$
BEGIN
    -- Entering a data record ID if the data record was created for the first time in the FrontEnd and cannot yet have an ID in the database
    IF NEW.patient_fe_id IS NULL THEN
        NEW.patient_fe_id := nextval('db.db_seq'); -- New Primary key of the entity
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER patient_fe_tr_ins
  BEFORE INSERT
  ON  db2frontend_in.patient_fe
  FOR EACH ROW
  EXECUTE PROCEDURE db2frontend_in.patient_fe_ins_fkt();

-- db2frontend_in.fall_fe
------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION db2frontend_in.fall_fe_ins_fkt()
RETURNS TRIGGER
SECURITY DEFINER
AS $$
BEGIN
    -- Entering a data record ID if the data record was created for the first time in the FrontEnd and cannot yet have an ID in the database
    IF NEW.fall_fe_id IS NULL THEN
        NEW.fall_fe_id := nextval('db.db_seq'); -- New Primary key of the entity
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER fall_fe_tr_ins
  BEFORE INSERT
  ON  db2frontend_in.fall_fe
  FOR EACH ROW
  EXECUTE PROCEDURE db2frontend_in.fall_fe_ins_fkt();

-- db2frontend_in.medikationsanalyse_fe
------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION db2frontend_in.medikationsanalyse_fe_ins_fkt()
RETURNS TRIGGER
SECURITY DEFINER
AS $$
BEGIN
    -- Entering a data record ID if the data record was created for the first time in the FrontEnd and cannot yet have an ID in the database
    IF NEW.medikationsanalyse_fe_id IS NULL THEN
        NEW.medikationsanalyse_fe_id := nextval('db.db_seq'); -- New Primary key of the entity
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER medikationsanalyse_fe_tr_ins
  BEFORE INSERT
  ON  db2frontend_in.medikationsanalyse_fe
  FOR EACH ROW
  EXECUTE PROCEDURE db2frontend_in.medikationsanalyse_fe_ins_fkt();

-- db2frontend_in.mrpdokumentation_validierung_fe
------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION db2frontend_in.mrpdokumentation_validierung_fe_ins_fkt()
RETURNS TRIGGER
SECURITY DEFINER
AS $$
BEGIN
    -- Entering a data record ID if the data record was created for the first time in the FrontEnd and cannot yet have an ID in the database
    IF NEW.mrpdokumentation_validierung_fe_id IS NULL THEN
        NEW.mrpdokumentation_validierung_fe_id := nextval('db.db_seq'); -- New Primary key of the entity
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER mrpdokumentation_validierung_fe_tr_ins
  BEFORE INSERT
  ON  db2frontend_in.mrpdokumentation_validierung_fe
  FOR EACH ROW
  EXECUTE PROCEDURE db2frontend_in.mrpdokumentation_validierung_fe_ins_fkt();

-- db2frontend_in.retrolektive_mrpbewertung_fe
------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION db2frontend_in.retrolektive_mrpbewertung_fe_ins_fkt()
RETURNS TRIGGER
SECURITY DEFINER
AS $$
BEGIN
    -- Entering a data record ID if the data record was created for the first time in the FrontEnd and cannot yet have an ID in the database
    IF NEW.retrolektive_mrpbewertung_fe_id IS NULL THEN
        NEW.retrolektive_mrpbewertung_fe_id := nextval('db.db_seq'); -- New Primary key of the entity
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER retrolektive_mrpbewertung_fe_tr_ins
  BEFORE INSERT
  ON  db2frontend_in.retrolektive_mrpbewertung_fe
  FOR EACH ROW
  EXECUTE PROCEDURE db2frontend_in.retrolektive_mrpbewertung_fe_ins_fkt();

-- db2frontend_in.risikofaktor_fe
------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION db2frontend_in.risikofaktor_fe_ins_fkt()
RETURNS TRIGGER
SECURITY DEFINER
AS $$
BEGIN
    -- Entering a data record ID if the data record was created for the first time in the FrontEnd and cannot yet have an ID in the database
    IF NEW.risikofaktor_fe_id IS NULL THEN
        NEW.risikofaktor_fe_id := nextval('db.db_seq'); -- New Primary key of the entity
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER risikofaktor_fe_tr_ins
  BEFORE INSERT
  ON  db2frontend_in.risikofaktor_fe
  FOR EACH ROW
  EXECUTE PROCEDURE db2frontend_in.risikofaktor_fe_ins_fkt();

-- db2frontend_in.trigger_fe
------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION db2frontend_in.trigger_fe_ins_fkt()
RETURNS TRIGGER
SECURITY DEFINER
AS $$
BEGIN
    -- Entering a data record ID if the data record was created for the first time in the FrontEnd and cannot yet have an ID in the database
    IF NEW.trigger_fe_id IS NULL THEN
        NEW.trigger_fe_id := nextval('db.db_seq'); -- New Primary key of the entity
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_fe_tr_ins
  BEFORE INSERT
  ON  db2frontend_in.trigger_fe
  FOR EACH ROW
  EXECUTE PROCEDURE db2frontend_in.trigger_fe_ins_fkt();

