services:

  # FHIR Server for testing/simulating
  # replace it with the productive FHIR Server and/or configure this
  # FHIR Server in the services below.
  # Handle the "deploy" section with care and configure it according to your setup and needs.
  #   The "deploy" section should only be commented out if necessary.
#  blaze-DIC:
#    image: "samply/blaze:latest"
#    deploy:
#      resources:
#        limits:
#          memory: 16G
#    restart: unless-stopped
#    environment:
#      BASE_URL: "http://localhost:8080"
#      LOG_LEVEL: ${BLAZE_LOG_LEVEL:-info}
#      JAVA_TOOL_OPTIONS: ${BLAZE_JVM_ARGS:--Xmx4g}
#      DB_BLOCK_CACHE_SIZE: ${BLAZE_BLOCK_CACHE_SIZE:-256}
#      DB_RESOURCE_CACHE_SIZE: ${BLAZE_DB_RESOURCE_CACHE_SIZE:-1000000}
#      DB_RESOURCE_HANDLE_CACHE_SIZE: ${BLAZE_DB_RESOURCE_HANDLE_CACHE_SIZE:-1000000}
#    ports:
#      - "127.0.0.1:8080:8080"
#    networks:
#      - internal
#      - external
#    volumes:
#      - "blaze-data-DIC:/app/data"

  # SQL Server for redcap
  redcap_db:
    image: mariadb:12
    restart: unless-stopped
    environment:
      TZ: Europe/Berlin
      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/redcap_db_root.password
      MARIADB_DATABASE: redcap
      MARIADB_USER: redcap
      MARIADB_PASSWORD_FILE: /run/secrets/redcap_db.password
    secrets:
      - redcap_db_root.password
      - redcap_db.password
    networks:
      - internal
    volumes:
      - ./REDCap-db/mariadb.cnf:/etc/mysql/mariadb.cnf
      - redcap-db-data:/var/lib/mysql
      - ./REDCap-db/init:/docker-entrypoint-initdb.d
      #- ./.my.cnf:/root/.my.cnf
    #command: --default-authentication-plugin=mysql_native_password

  # Frontend (redcap)
  redcap:
    build: ./REDCap-app/build
    #user: "www-data:www-data"
    depends_on:
      - redcap_db
    restart: unless-stopped
    networks:
      - internal
      - external
    ports:
      - "127.0.0.1:8082:80"
    environment:
      TZ: Europe/Berlin
    volumes:
      - ./REDCap-app/html/redcap:/var/www/html/redcap
      - ./REDCap-app/html/redcapdocs:/var/www/html/redcapdocs
      - ./REDCap-app/build/config/php.ini:/usr/local/etc/php/conf.d/my.ini
      - ./REDCap-app/log/:/var/log/


  # Database (postgres) for CDS_HUB
  cds_hub:
    build: ./Postgres-cds_hub/build
    restart: unless-stopped
    #    healthcheck:
    # test: [ "CMD-SHELL", "pg_isready -U postgres -d cds_hub" ]
    # interval: 10s
    # timeout: 5s
    # retries: 5
    ports:
      - "15432:5432"
    # Shared Memory auf 1GB für große Joins setzen
    shm_size: 1g
    environment:
      TZ: Europe/Berlin
      POSTGRES_PASSWORD_FILE: /run/secrets/cds_hub_db_admin.password
      POSTGRES_USER: cds_hub_db_admin
      POSTGRES_DB: cds_hub_db
    command: "-c config_file=/etc/postgresql.conf"
    secrets:
      - cds_hub_db_admin.password
    networks:
      - internal
    volumes:
      - cds_hub_db-data:/var/lib/postgresql/data
      - ./Postgres-cds_hub/postgresql.conf:/etc/postgresql.conf
      # Zur automatischen Initialisierung die nachfolgende Zeile einkommentieren, siehe Hinweise unter https://medizininformatik-initiative.github.io/INTERPOLAR/Install
      # - ./Postgres-cds_hub/init/:/docker-entrypoint-initdb.d/
      # Script zum Anlegen der für INTERPOLAR benötigten Rollen per docker-entrypoint, d.h. beim initialen Ausführen von "docker compose up"
      - ./Postgres-cds_hub/init/001_main_user_schema_sequence.sql:/docker-entrypoint-initdb.d/001_main_user_schema_sequence.sql
      - ./Postgres-cds_hub/init/:/cds_hub-initdb.d/

  # Web-administration of cds_hub__db (optional)
  pgadmin:
    image: elestio/pgadmin
    restart: unless-stopped
    ports:
      - "127.0.0.1:8089:80"
    environment:
      PGADMIN_DEFAULT_PASSWORD: "password"
      PGADMIN_DEFAULT_EMAIL: a@b.cda
      PGADMIN_SERVER_JSON_FILE: pgadmin_cds_hub.json
    depends_on:
      - cds_hub
    networks:
      - internal
      - external
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./pgadmin_cds_hub.json:/pgadmin4/pgadmin_cds_hub.json

  # This section is no service, but for building the R-environment
  # to execute (manualy) R scripts for r-cds2db and r-db2frontend,
  # e.g. StartRetrieval.R
  # Handle the "deploy" section with care and configure it according to your setup and needs.
  #   The "deploy" section should only be commented out if necessary.
  r-env:
    build:
      context: ./
      dockerfile: Dockerfile_R
    working_dir: /src
#    deploy:
#      resources:
#        limits:
#          memory: 16G
    restart: "no"
    environment:
      TZ: Europe/Berlin
      # There are some environment variables for curl regarding certificates. 
      # Please set them as needed. See also section 'volumes' below and 
      # the curl documentation https://curl.se/docs/sslcerts.html
      #CURL_CA_BUNDLE: /etc/ssl/certs/<CHAIN.pem>
      #SSL_CERT_FILE: /etc/ssl/certs/<self-signed_cert_FHIR-Server.pem>
      #SSL_CERT_DIR: /etc/ssl/certs
    volumes:
      - ./.git:/src/.git:ro
      - ./outputLocal:/src/outputLocal
      - ./outputGlobal:/src/outputGlobal
      - ./R-cds2db/cds2db_config.toml:/src/R-cds2db/cds2db_config.toml
      - ./R-cds2db/debug_config_toml:/src/R-cds2db/debug_config_toml
      - ./R-cds2db/source_PIDs.txt:/src/R-cds2db/source_PIDs.txt
      - ./R-dataprocessor/dataprocessor_config.toml:/src/R-dataprocessor/dataprocessor_config.toml
      - ./R-db2frontend/db2frontend_config.toml:/src/R-db2frontend/db2frontend_config.toml
      - ./cds_hub_db_config.toml:/src/cds_hub_db_config.toml
      #- <Path_to_INTERPOLAR-WP7_folder>:/src/Input-Repo/INTERPOLAR-WP7
      # Include certificates, e.g. self-signed certificates of the FHIR-Server,
      # incl. root-CA or CHAIN if needed. See also section 'environment' above.
      #- <self-signed_cert_FHIR-Server.pem>:/etc/ssl/certs/<self-signed_cert_FHIR-Server.pem>
      #- <root-CA_cert.pem>:/etc/ssl/certs/<root-CA_cert.pem>
      #- <CHAIN.pem>:/etc/ssl/certs/<CHAIN.pem>
    depends_on:
      - cds_hub
      - redcap
      - redcap_db
    networks:
      - internal
    command: ["/bin/true"]


networks:
  external:
    driver: bridge
  internal:
    driver: bridge

secrets:
  cds_hub_db_admin.password:
    file: ./Postgres-cds_hub/.env_cds_hub_db_admin.password
  redcap_db_root.password:
    file: ./REDCap-db/.env_redcap_db_root.password
  redcap_db.password:
    file: ./REDCap-db/.env_redcap_db.password

volumes:
    #blaze-data-DIC:
    redcap-db-data:
    cds_hub_db-data:
    pgadmin-data:

